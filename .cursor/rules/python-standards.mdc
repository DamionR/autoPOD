---
description: 
globs: 
alwaysApply: true
---
# Python Code Quality
- Follow PEP8 and Black for formatting; use Flake8 for linting.
- Use type hints for all function signatures and class attributes where possible.
- Write clear, concise docstrings for all modules, classes, and complex functions (Google or NumPy style).
- Use descriptive, snake_case names for variables, functions, and files; PascalCase for classes.
- Avoid global state; prefer dependency injection and explicit context passing.
- Use virtual environments and requirements.txt/pyproject.toml for dependency management.
- Remove unused imports, variables, and dead code.
- Handle exceptions explicitly; never use bare excepts.
- Log errors and important events using structured logging (never log secrets or sensitive data).
- Write unit tests for all business logic (pytest recommended); aim for high coverage.
- Use environment variables or config files for secrets and environment-specific settings.
- Document all API endpoints with OpenAPI/Swagger (FastAPI does this automatically).

# FastAPI/Flask API Design
- Keep route files thin; put business logic in service layers.
- Validate all incoming data with Pydantic (FastAPI) or Marshmallow (Flask).
- Use RESTful resource naming and proper HTTP status codes.
- Return clear, actionable error messages.
- Use async endpoints in FastAPI where appropriate.
- Document all endpoints and expected request/response schemas.

# LLM/ML and Data Pipelines
- Use DVC for data versioning and pipeline management if applicable.
- Keep ML/LLM code modular: separate data loading, preprocessing, model, and evaluation.
- Document all non-obvious model and pipeline decisions.
- Use clear, reproducible experiment tracking (e.g., MLflow, Weights & Biases).

# General Python Best Practices
- Prefer explicit over implicit; avoid "magic" behavior.
- Use list comprehensions and generator expressions for clarity and performance.
- Avoid circular imports; structure modules for clarity and maintainability.
- Use context managers for resource management (files, DB connections, etc).
