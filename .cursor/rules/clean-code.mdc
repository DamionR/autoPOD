---
description: 
globs: 
alwaysApply: true
---
# Clean Code Principles
- Write code that is easy to read, understand, and maintain.
- Use meaningful, descriptive names for variables, functions, classes, and files.
- Keep functions and components small and focused on a single responsibility.
- Avoid deep nesting; refactor complex logic into smaller functions.
- Remove dead code, commented-out code, and unused imports promptly.
- Use consistent formatting and follow project linting rules (Prettier, ESLint, Black, Flake8).
- Write clear, concise comments and docstrings where necessary, but prefer self-explanatory code.
- Avoid magic numbers and hardcoded values; use constants or config files.
- Prefer immutability and pure functions where possible.
- Handle errors gracefully and provide actionable error messages.
- Write unit and integration tests for all business logic and critical user flows.
- Use version control best practices: atomic commits, descriptive messages, and logical grouping of changes.
- Review code for security, performance, and maintainability.
- Refactor regularly to improve code structure and reduce technical debt.

# AI-Friendly Coding Practices
- Write explicit, unambiguous code and comments to help AI agents understand intent.
- Use clear separation of concerns and modular design.
- Document assumptions, edge cases, and non-obvious decisions.
- Prefer declarative patterns over imperative ones in React.
- Use type hints in Python where helpful for clarity (but do not use TypeScript in frontend).
