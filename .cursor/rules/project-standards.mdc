---
description: 
globs: 
alwaysApply: true
---
# Project Standards Overview
This project follows strict standards for code quality, structure, and collaboration, inspired by top engineering teams (OpenAI, GitHub, Shopify, Google). All contributors must read and follow these rules.

## Modular Rule Files
- See `.cursor/rules/clean-code.mdc` for clean code and code quality principles.
- See `.cursor/rules/python-standards.mdc` for Python backend and API standards.
- See `.cursor/rules/react-standards.mdc` for React (CRA) frontend standards.
- See `.cursor/rules/tailwind-standards.mdc` for Tailwind CSS and UI conventions.

## General Principles
- Clarity and simplicity: Code and UI should be as simple as possible, but no simpler.
- Consistency: Follow consistent patterns for naming, structure, and styling across the entire codebase.
- Professionalism: Every file, function, and component should reflect the highest standards.
- Documentation: All modules, components, and complex functions must be documented with clear docstrings or comments.
- No dead code: Remove unused code, files, and dependencies promptly.

## Collaboration & Workflow
- Write clear, descriptive commit messages. Group related changes in a single commit.
- All PRs must be reviewed by at least one other engineer and include a summary of changes and testing steps.
- Focus code reviews on correctness, clarity, and maintainability. Suggest improvements, not just point out problems.
- Use issues for all bugs, features, and technical debt. Link PRs to relevant issues.

## Project Hygiene
- Keep dependencies up to date. Remove unused packages. Use `npm audit` and `pip-audit` regularly.
- Use `.env` files for local development. Never commit secrets. Provide clear setup instructions in `README.md`.
- All tests must pass before merging. Use automated linting and formatting (Prettier, ESLint, Black, Flake8).

---

**These rules are mandatory. All contributors must read and follow them.**
